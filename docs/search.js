window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "MyPyDrawIO", "modulename": "MyPyDrawIO", "kind": "module", "doc": "<p>MyPyDrawio erm\u00f6glicht bestehende DrawIO Dateien zu laden oder neue DrawIO Dateien zu erstellen. Deren Aufbau kann angezeigt und manipuliert werden. Diese Dateien k\u00f6nnen gespeichert oder in einer Datei mit anderem Namen gespeichert werden.</p>\n\n<p>Eine DrawIO Datei wird durch ein <a href=\"./MyPyDrawIO/File.html#File\">File</a> repr\u00e4sentiert.\nDie Seiten einer Datei werden durch <a href=\"./MyPyDrawIO/Page.html#Page\">Pages</a> repr\u00e4sentiert.\nBei den Shapes auf den Seiten wird zwischen <a href=\"./MyPyDrawIO/Vertex.html#Vertex\">Vertices</a> (den Objekten) und <a href=\"./MyPyDrawIO/Edge.html#Edge\">Edges</a> (den Verbindern) unterschieden.</p>\n\n<p>Neue Vertices und Edges werden \u00fcber DrawIO Bibliotheken definiert. Diese Bibliotheken k\u00f6nnen \u00fcber <a href=\"./MyPyDrawIO/Libraries.html#Libraries\">Libraries</a> geladen werden. Die Elemente in den Bibliotheken, also die Vertices und Edges, sind den Create-Funktionen einer Seite zu \u00fcbergeben, so dass entsprechend der Voreinstellung des Elements eine konkrete Instanz zu diesem Element erstellt wird.</p>\n"}, {"fullname": "MyPyDrawIO.Attributes", "modulename": "MyPyDrawIO.Attributes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "MyPyDrawIO.Attributes.Attributes", "modulename": "MyPyDrawIO.Attributes", "qualname": "Attributes", "kind": "class", "doc": "<p>Abstrakte Klasse, \u00fcber die die XML-Attribute eines Elements generisch zug\u00e4nglich gemacht werden. Die XML-Attribute sind durch ein @ gekennzeichnet.</p>\n", "bases": "builtins.dict"}, {"fullname": "MyPyDrawIO.Attributes.Attributes.addAttribute", "modulename": "MyPyDrawIO.Attributes", "qualname": "Attributes.addAttribute", "kind": "function", "doc": "<p>Wenn das Attribute bereits besteht, wird dessen Wert gesetzt, solange es nicht gesch\u00fctzt ist.\nWenn das Attribute nicht besteht, wird es erg\u00e4nzt, solange es nicht gesch\u00fctzt ist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Attributes.Attributes.attributes", "modulename": "MyPyDrawIO.Attributes", "qualname": "Attributes.attributes", "kind": "function", "doc": "<p>Liste der Attribute, die von diesem Objekt bereitgestellt werden.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Attributes.Attributes.attribute", "modulename": "MyPyDrawIO.Attributes", "qualname": "Attributes.attribute", "kind": "function", "doc": "<p>Gibt den Wert des Attributes zur\u00fcck, wenn dieses existiert. Ansonsten wird None zur\u00fcckgegeben.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Attributes.Attributes.setAttribute", "modulename": "MyPyDrawIO.Attributes", "qualname": "Attributes.setAttribute", "kind": "function", "doc": "<p>Setzt den Wert des Attributes, wenn dieses existiert und nicht gesch\u00fctzt ist.\n(Wenn es nicht existiert, wird es nicht erstellt und auch nicht gesetzt.)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Attributes.Attributes.setProtectedAttributes", "modulename": "MyPyDrawIO.Attributes", "qualname": "Attributes.setProtectedAttributes", "kind": "function", "doc": "<p>Setzt eine Liste von Attributen, die nicht \u00fcber <code>MyPyDrawIO.Attributes.Attributes.addAttribute</code> und <code>MyPyDrawIO.Attributes.Attributes.setAttribute</code> ge\u00e4ndert werden k\u00f6nnen.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">attributes</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Attributes.Attributes.getValue", "modulename": "MyPyDrawIO.Attributes", "qualname": "Attributes.getValue", "kind": "function", "doc": "<p>\u00d6ffentliche Funktion, die das Auslesen von Key-Value-Paaren in einem Dictionary kapselt und Abbr\u00fcche durch Fehler vermeidet.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">aDict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Edge", "modulename": "MyPyDrawIO.Edge", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "MyPyDrawIO.Edge.Edge", "modulename": "MyPyDrawIO.Edge", "qualname": "Edge", "kind": "class", "doc": "<p>Objekt, das eine Edge auf einer <a href=\"./Page.html#Page\">Page</a> repr\u00e4sentiert.</p>\n", "bases": "MyPyDrawIO.Attributes.Attributes"}, {"fullname": "MyPyDrawIO.Edge.Edge.__init__", "modulename": "MyPyDrawIO.Edge", "qualname": "Edge.__init__", "kind": "function", "doc": "<p>Wenn ein Dictionary (mit dem Inhalt einer Edge) \u00fcbergeben wird, wird ein entsprechendes Edge Objekt erstellt. Wenn ein <a href=\"./Libraries.html#Element\">Libraries.Element</a> \u00fcbergeben wird, wird entsprechend dessen Definition ein Edge Objekt erstellt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">sourceID</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">targetID</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "MyPyDrawIO.Edge.Edge.content", "modulename": "MyPyDrawIO.Edge", "qualname": "Edge.content", "kind": "function", "doc": "<p>Gibt den Inhalt dieser edge zur\u00fcck, welcher nach der \u00dcberf\u00fchrung in XML zum Speichern in der Datei genutzt werden kann.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Edge.Edge.geometry", "modulename": "MyPyDrawIO.Edge", "qualname": "Edge.geometry", "kind": "function", "doc": "<p>Gibt die <a href=\"./Geometry.html#Geometry\">Geometry</a> dieser Edge zur\u00fcck.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">Geometry</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Edge.Edge.id", "modulename": "MyPyDrawIO.Edge", "qualname": "Edge.id", "kind": "function", "doc": "<p>Gibt das Attribut id des Vertex zur\u00fcck.\n<br>\n<br>Technischer Hintergrund:\n<br>Je nachdem, ob ein Vertex als Object oder als einfacher Vertex realisiert ist, wird dessen ID \nentweder im Object oder halt im einfachen Vertex hinterlegt. Diese Funktion f\u00fchrt die entsprechende\nPr\u00fcfung durch und gibt die id zur\u00fcck.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Edge.Edge.isObject", "modulename": "MyPyDrawIO.Edge", "qualname": "Edge.isObject", "kind": "function", "doc": "<p>Gibt zur\u00fcck, ob dieser Vertex ein Object ist.\n<br> true -> Vertex ist ein Object\n<br> false -> Vertex ist kein Object, sondern ein einfacher Vertex.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.ElementDefinition", "modulename": "MyPyDrawIO.ElementDefinition", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "MyPyDrawIO.ElementDefinition.ElementDefinition", "modulename": "MyPyDrawIO.ElementDefinition", "qualname": "ElementDefinition", "kind": "class", "doc": "<p>ElementDefinitions werden beim Laden von <a href=\"./Library.html#Library\">Library Objekten</a> angelegt. Sie repr\u00e4sentieren die in der DrawIO Bibliothek enthaltenen Definitionen von <a href=\"./Vertex.html#Vertex\">Vertices</a> und <a href=\"./Edge.html#Edge\">Edges</a> und dienen als Vorlage f\u00fcr die Erstellung. Hierzu werden sie den Funktionen <a href=\"./Page.html#Page.createVertex\">Page.createVertex()</a> und <a href=\"./Page.html#Page.createEdge\">Page.createEdge()</a> \u00fcbergeben.</p>\n", "bases": "builtins.dict"}, {"fullname": "MyPyDrawIO.ElementDefinition.ElementDefinition.parse", "modulename": "MyPyDrawIO.ElementDefinition", "qualname": "ElementDefinition.parse", "kind": "function", "doc": "<p>Der \u00fcbergebene String wird geparst. In diesem String sollte die Definition eines DrawIO Elements enthalten sein.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">definition</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.File", "modulename": "MyPyDrawIO.File", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "MyPyDrawIO.File.File", "modulename": "MyPyDrawIO.File", "qualname": "File", "kind": "class", "doc": "<p>Repr\u00e4sentation einer gesamten drawIO-Datei.\nDie wichtigsten Eigenschaften dieser Datei sind der Dateipfad und die Seiten der Datei.</p>\n\n<p>\u00dcber <a href=\"./File.html#File.pages\">pages()</a> werden die aktuell in der Datei enthaltenen <a href=\"./Page.html#Page\">Page Objekte</a> in der Reiehnfolge, wie sie auch in der DrawIO Datei gespeichert werden, ausgegeben. Die in dieser Liste enthalten <a href=\"./Page.html#Page\">Page Objekte</a> k\u00f6nnen direkt zur Bearbeitung und Ansicht des Seiteninhalts genutzt werden.</p>\n", "bases": "MyPyDrawIO.Attributes.Attributes"}, {"fullname": "MyPyDrawIO.File.File.__init__", "modulename": "MyPyDrawIO.File", "qualname": "File.__init__", "kind": "function", "doc": "<p>filePath ist der Pfad zu der Datei, die ge\u00f6ffnet oder erstellt werden soll. Wenn die Datei noch nicht besteht, wird eine neue Datei unter dem Dateipfad angelegt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filePath</span></span>)</span>"}, {"fullname": "MyPyDrawIO.File.File.deletePage", "modulename": "MyPyDrawIO.File", "qualname": "File.deletePage", "kind": "function", "doc": "<p>L\u00f6scht die Seite an der angegebenen Position.\nWenn mit dem Aufruf die letzte Seite gel\u00f6scht wird, wird die leere \"Seite - 1\" eingef\u00fcgt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.File.File.insertPage", "modulename": "MyPyDrawIO.File", "qualname": "File.insertPage", "kind": "function", "doc": "<p>Erstellt eine neue Seite und f\u00fcgt sie an der angegebenen Position ein. Das erstellte <a href=\"./Page.html#Page\">Page Objekt</a> wird zur\u00fcckgegeben.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">Page</span><span class=\"o\">.</span><span class=\"n\">Page</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.File.File.movePage", "modulename": "MyPyDrawIO.File", "qualname": "File.movePage", "kind": "function", "doc": "<p>Verschiebt die Seite von der Position Old auf die Position New.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">positionOld</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">positionNew</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.File.File.numOfPages", "modulename": "MyPyDrawIO.File", "qualname": "File.numOfPages", "kind": "function", "doc": "<p>Gibt die Anzahl der Seiten in der DrawIO Datei aus.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.File.File.open", "modulename": "MyPyDrawIO.File", "qualname": "File.open", "kind": "function", "doc": "<p>Wenn aktuell eine Datei ge\u00f6ffnet ist, wird diese gespeichert.\nWenn die in filePath angegebene Datei besteht, wird diese ge\u00f6ffnet.\nWenn die in filePath angegebene Datei nicht besteht, wird diese erstellt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filePath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.File.File.pages", "modulename": "MyPyDrawIO.File", "qualname": "File.pages", "kind": "function", "doc": "<p>Eine geordnete Liste der <a href=\"./Page.html#Page\">Page Objekte</a> zu allen Seiten.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">Page</span><span class=\"o\">.</span><span class=\"n\">Page</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.File.File.save", "modulename": "MyPyDrawIO.File", "qualname": "File.save", "kind": "function", "doc": "<p>Speichert den aktuellen Arbeitsstand unter dem zuvor angegebenen Dateipfad.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.File.File.saveAs", "modulename": "MyPyDrawIO.File", "qualname": "File.saveAs", "kind": "function", "doc": "<p>Speichert den aktuellen Arbeitsstand unter dem neu angegebenen Dateipfad. Ein erneuter Aufruf von <a href=\"./File.html#File.save\">save()</a> speichert den Arbeitsstand dann ebenfalls unter dem neu angegebenen Dateipfad.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filePath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Geometry", "modulename": "MyPyDrawIO.Geometry", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "MyPyDrawIO.Geometry.Geometry", "modulename": "MyPyDrawIO.Geometry", "qualname": "Geometry", "kind": "class", "doc": "<p>Klasse, die eine Geometry eines Nodes oder einer Edge repr\u00e4esntiert.</p>\n", "bases": "MyPyDrawIO.Attributes.Attributes"}, {"fullname": "MyPyDrawIO.Geometry.Geometry.__init__", "modulename": "MyPyDrawIO.Geometry", "qualname": "Geometry.__init__", "kind": "function", "doc": "<p>Konstruktor, dem ein Dictionary mit dem Inhalt einer bestehenden Geometry zu \u00fcbergeben ist.</p>\n\n<p>Args:\n    geometryContent {dict} Dictionary mit dem Content der Geometry</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">geometryContent</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "MyPyDrawIO.Geometry.Geometry.content", "modulename": "MyPyDrawIO.Geometry", "qualname": "Geometry.content", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Libraries", "modulename": "MyPyDrawIO.Libraries", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "MyPyDrawIO.Libraries.Libraries", "modulename": "MyPyDrawIO.Libraries", "qualname": "Libraries", "kind": "class", "doc": "<p>Singleton-Klasse zum Laden von DrawIO-Bibliotheken (xml-Dateien).\nJede Bibliothek wird \u00fcber ein eigenes <a href=\"./Library.html#Library\">Library Objekt</a> abgebildet. Zu den in den DrawIO Bibliotheken enthaltenen Vertices und Edges werden <a href=\"./ElementDefinition.html#ElementDefinition\">ElementDefinition</a> erstellt. Diese dienen als Vorlage f\u00fcr die Erstellung von Vertices und Edges, welche den Funktionen <a href=\"./Page.html#Page.createVertex\">Page.createVertex()</a> und <a href=\"./Page.html#Page.createEdge\">Page.createEdge()</a> \u00fcbergeben werden.</p>\n"}, {"fullname": "MyPyDrawIO.Libraries.Libraries.__init__", "modulename": "MyPyDrawIO.Libraries", "qualname": "Libraries.__init__", "kind": "function", "doc": "<p>Das Libraries Objekt wird als Singleton erstellt, da es als zentrales Objekt den Zugriff auf die Bibliotheken erm\u00f6glichen soll.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "MyPyDrawIO.Libraries.Libraries.libraries", "modulename": "MyPyDrawIO.Libraries", "qualname": "Libraries.libraries", "kind": "function", "doc": "<p>Gibt eine Liste der <a href=\"./Library.html#Library\">Library Objekte</a> zur\u00fcck.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">Library</span><span class=\"o\">.</span><span class=\"n\">Library</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Libraries.Libraries.loadLibrary", "modulename": "MyPyDrawIO.Libraries", "qualname": "Libraries.loadLibrary", "kind": "function", "doc": "<p>L\u00e4dt die DrawIO Library-Datei, wenn diese existiert, erstellt ein <a href=\"./Library.html#Library\">Library Objekte</a> und f\u00fcgt dieses der Liste der <a href=\"./Libraries.html#Libraries.libraries\">libraries()</a> hinzu.</p>\n\n<p>Gibt True zur\u00fcck, wenn die Library geladen werden konnte, ansonsten wird False ausgegeben.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filePath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Library", "modulename": "MyPyDrawIO.Library", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "MyPyDrawIO.Library.Library", "modulename": "MyPyDrawIO.Library", "qualname": "Library", "kind": "class", "doc": "<p>Repr\u00e4sentation einer DrawIO-Bibliothek (xml-Datei). Zu den in den DrawIO Bibliotheken enthaltenen Vertices und Edges werden <a href=\"./ElementDefinition.html#ElementDefinition\">ElementDefinition</a> erstellt. Diese dienen als Vorlage f\u00fcr die Erstellung von Vertices und Edges, welche den Funktionen <a href=\"./Page.html#Page.createVertex\">Page.createVertex()</a> und <a href=\"./Page.html#Page.createEdge\">Page.createEdge()</a> \u00fcbergeben werden.</p>\n", "bases": "builtins.dict"}, {"fullname": "MyPyDrawIO.Library.Library.vertex", "modulename": "MyPyDrawIO.Library", "qualname": "Library.vertex", "kind": "function", "doc": "<p>Gibt eine <a href=\"./ElementDefinition.html#ElementDefinition\">ElementDefinition</a> f\u00fcr die Erstellung eines <a href=\"./Vertex.html#Vertex\">Vertices</a> zur\u00fcck.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">ElementDefinition</span><span class=\"o\">.</span><span class=\"n\">ElementDefinition</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Library.Library.edge", "modulename": "MyPyDrawIO.Library", "qualname": "Library.edge", "kind": "function", "doc": "<p>Gibt eine <a href=\"./ElementDefinition.html#ElementDefinition\">ElementDefinition</a> f\u00fcr die Erstellung einer <a href=\"./Edge.html#Edge\">Edge</a> zur\u00fcck.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">ElementDefinition</span><span class=\"o\">.</span><span class=\"n\">ElementDefinition</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Library.Library.vertices", "modulename": "MyPyDrawIO.Library", "qualname": "Library.vertices", "kind": "function", "doc": "<p>Gibt eine Liste der Namen der <a href=\"./ElementDefinition.html#ElementDefinition\">ElementDefinition</a> f\u00fcr die Erstellung eines <a href=\"./Vertex.html#Vertex\">Vertices</a> zur\u00fcck.\n\u00dcber diese Namen k\u00f6nnen die <a href=\"./ElementDefinition.html#ElementDefinition\">ElementDefinitionen</a> in der Funktion <a href=\"./Library.html#Library.vertex\">edge()</a> abgerufen werden.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Library.Library.edges", "modulename": "MyPyDrawIO.Library", "qualname": "Library.edges", "kind": "function", "doc": "<p>Gibt eine Liste der Namen der <a href=\"./ElementDefinition.html#ElementDefinition\">ElementDefinition</a> f\u00fcr die Erstellung einer <a href=\"./Edge.html#Edge\">Edge</a> zur\u00fcck.\n\u00dcber diese Namen k\u00f6nnen die <a href=\"./ElementDefinition.html#ElementDefinition\">ElementDefinitionen</a> in der Funktion <a href=\"./Library.html#Library.edge\">edge()</a> abgerufen werden.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Library.Library.load", "modulename": "MyPyDrawIO.Library", "qualname": "Library.load", "kind": "function", "doc": "<p>L\u00e4dt die in filePath angegebene DrawIO Bibliothek und legt zu all den in der Bibliothek enthaltenen Elemente <a href=\"./ElementDefinition.html#ElementDefinition\">ElementDefinition</a> an.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filePath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Page", "modulename": "MyPyDrawIO.Page", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "MyPyDrawIO.Page.Page", "modulename": "MyPyDrawIO.Page", "qualname": "Page", "kind": "class", "doc": "<p>Repr\u00e4sentation einer Seite in einer drawIO-Datei.</p>\n", "bases": "MyPyDrawIO.Attributes.Attributes"}, {"fullname": "MyPyDrawIO.Page.Page.__init__", "modulename": "MyPyDrawIO.Page", "qualname": "Page.__init__", "kind": "function", "doc": "<p>Wenn ein Dictionary (mit dem Inhalt zu einer Seite) \u00fcbergeben wird, wird dieser Inhalt interpretiert und eine Seite mit entsprechendem Inhalt erstellt. Wenn ein String \u00fcbergeben wird, wird eine leere Seite mit dem String als Namen erstellt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span></span>)</span>"}, {"fullname": "MyPyDrawIO.Page.Page.createVertex", "modulename": "MyPyDrawIO.Page", "qualname": "Page.createVertex", "kind": "function", "doc": "<p>Entsprechend der mit <a href=\"./Libraries.html#Element\">Element</a> vorgegebenen Definition wird ein <a href=\"./Vertex.html#Vertex\">Vertex</a> f\u00fcr diese Seite erstellt. Wenn ein Parent <a href=\"./Vertex.html#Vertex\">Vertex</a> \u00fcbergeben wird, wird der erstellte <a href=\"./Vertex.html#Vertex\">Vertex</a> diesem Parent als Child zugeordnet. Der erstellte <a href=\"./Vertex.html#Vertex\">Vertex</a> wird zur\u00fcckgegeben.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">ElementDefinition</span><span class=\"o\">.</span><span class=\"n\">ElementDefinition</span>,</span><span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">Vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">Vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Page.Page.createEdge", "modulename": "MyPyDrawIO.Page", "qualname": "Page.createEdge", "kind": "function", "doc": "<p>Entsprechend der mit <a href=\"./Libraries.html#Element\">Element</a> vorgegebenen Definition wird eine <a href=\"./Edge.html#Edge\">Edge</a> f\u00fcr diese Seite erstellt. Die erstellte <a href=\"./Edge.html#Edge\">Edge</a> wird zur\u00fcckgegeben.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">ElementDefinition</span><span class=\"o\">.</span><span class=\"n\">ElementDefinition</span>,</span><span class=\"param\">\t<span class=\"n\">sourceID</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">targetID</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">Edge</span><span class=\"o\">.</span><span class=\"n\">Edge</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Page.Page.edges", "modulename": "MyPyDrawIO.Page", "qualname": "Page.edges", "kind": "function", "doc": "<p>Gibt eine Liste der <a href=\"./Edge.html#Edge\">Edges</a> dieser Seite zur\u00fcck.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">Edge</span><span class=\"o\">.</span><span class=\"n\">Edge</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Page.Page.id", "modulename": "MyPyDrawIO.Page", "qualname": "Page.id", "kind": "function", "doc": "<p>Gibt die id dieser Page zur\u00fcck.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Page.Page.name", "modulename": "MyPyDrawIO.Page", "qualname": "Page.name", "kind": "function", "doc": "<p>Gibt den Namen dieser Page zur\u00fcck.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Page.Page.vertices", "modulename": "MyPyDrawIO.Page", "qualname": "Page.vertices", "kind": "function", "doc": "<p>Gibt eine Liste aller Top Level <a href=\"./Vertex.html#Vertex\">Vertices</a> der Page zur\u00fcck. Die Children dieser <a href=\"./Vertex.html#Vertex\">Vertices</a> werden unter jedem Parent <a href=\"./Vertex.html#Vertex\">Vertex</a> angegeben. Den Children sind wiederum die ihnen zugeh\u00f6rigen Children zugeordnet und so weiter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">Vertex</span><span class=\"o\">.</span><span class=\"n\">Vertex</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Page.Page.content", "modulename": "MyPyDrawIO.Page", "qualname": "Page.content", "kind": "function", "doc": "<p>Gibt den Inhalt dieser Seite zur\u00fcck, welcher nach der \u00dcberf\u00fchrung in XML zum Speichern in der Datei genutzt werden kann.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Page.Page.setName", "modulename": "MyPyDrawIO.Page", "qualname": "Page.setName", "kind": "function", "doc": "<p>Setzt den Namen dieser Page.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Vertex", "modulename": "MyPyDrawIO.Vertex", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "MyPyDrawIO.Vertex.Vertex", "modulename": "MyPyDrawIO.Vertex", "qualname": "Vertex", "kind": "class", "doc": "<p>Objekt, das einen Vertex auf einer <a href=\"./Page.html#Page\">Page</a> repr\u00e4sentiert.</p>\n", "bases": "MyPyDrawIO.Attributes.Attributes"}, {"fullname": "MyPyDrawIO.Vertex.Vertex.__init__", "modulename": "MyPyDrawIO.Vertex", "qualname": "Vertex.__init__", "kind": "function", "doc": "<p>Wenn ein Dictionary (mit dem Inhalt eines Vertex) \u00fcbergeben wird, wird ein entsprechendes Vertex Objekt erstellt. Wenn ein <a href=\"./Libraries.html#Element\">Libraries.Element</a> \u00fcbergeben wird, wird entsprechend dessen Definition ein Vertex Objekt erstellt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "MyPyDrawIO.Vertex.Vertex.addChild", "modulename": "MyPyDrawIO.Vertex", "qualname": "Vertex.addChild", "kind": "function", "doc": "<p>F\u00fcgt diesem Vertex das newChild hinzu. Sollte das newChild bereits einem anderen Vertex als Child zugeordnet sein, wird er dort als Child entfernt. Dieser Vertex wird bei dem newChild als <a href=\"./Vertex.html#Parent\">Parent</a> gesetzt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">newChild</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Vertex.Vertex.content", "modulename": "MyPyDrawIO.Vertex", "qualname": "Vertex.content", "kind": "function", "doc": "<p>Gibt den Inhalt dieses Vertex zur\u00fcck, welcher nach der \u00dcberf\u00fchrung in XML zum Speichern in der Datei genutzt werden kann.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Vertex.Vertex.geometry", "modulename": "MyPyDrawIO.Vertex", "qualname": "Vertex.geometry", "kind": "function", "doc": "<p>Gibt die <a href=\"./Geometry.html#Geometry\">Geometry</a> dieses Vertex zur\u00fcck.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">MyPyDrawIO</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"o\">.</span><span class=\"n\">Geometry</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Vertex.Vertex.id", "modulename": "MyPyDrawIO.Vertex", "qualname": "Vertex.id", "kind": "function", "doc": "<p>Gibt das Attribut id des Vertex zur\u00fcck.\n<br>\n<br>Technischer Hintergrund:\n<br>Je nachdem, ob ein Vertex als Object oder als einfacher Vertex realisiert ist, wird dessen ID \nentweder im Object oder halt im einfachen Vertex hinterlegt. Diese Funktion f\u00fchrt die entsprechende\nPr\u00fcfung durch und gibt die id zur\u00fcck.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Vertex.Vertex.isObject", "modulename": "MyPyDrawIO.Vertex", "qualname": "Vertex.isObject", "kind": "function", "doc": "<p>Gibt zur\u00fcck, ob dieser Vertex ein Object ist.\n<br> true -> Vertex ist ein Object\n<br> false -> Vertex ist kein Object, sondern ein einfacher Vertex.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Vertex.Vertex.removeChild", "modulename": "MyPyDrawIO.Vertex", "qualname": "Vertex.removeChild", "kind": "function", "doc": "<p>Entfernt child bei diesem Vertex als child. Bei dem Child wird der <a href=\"./Vertex.html#Vertex.parent\">parent()</a> auf None gesetzt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">child</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Vertex.Vertex.parent", "modulename": "MyPyDrawIO.Vertex", "qualname": "Vertex.parent", "kind": "function", "doc": "<p>Vertex, welcher der Parent dieses Vertex Objekts ist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "MyPyDrawIO.Vertex.Vertex.setParent", "modulename": "MyPyDrawIO.Vertex", "qualname": "Vertex.setParent", "kind": "function", "doc": "<p>Setzt den Parent Vertex, zu diesem Vertex Objekt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();